<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InMemoryLoaderBase</name>
    </assembly>
    <members>
        <member name="T:InMemoryLoaderBase.HelperEnum.DateInterval">
            <summary>
            Aufzählung der möglichen Datumsintervalle
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateInterval.Years">
            <summary>
            Jahre
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateInterval.Months">
            <summary>
            Monate
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateInterval.Weeks">
            <summary>
            Wochen
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateInterval.Days">
            <summary>
            Tage
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateInterval.Hours">
            <summary>
            Stunden
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateInterval.Minutes">
            <summary>
            Minuten
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateInterval.Seconds">
            <summary>
            Sekunden
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateInterval.Milliseconds">
            <summary>
            Millisekunden
            </summary>
        </member>
        <member name="T:InMemoryLoaderBase.HelperEnum.DateTimeAmPmType">
            <summary>
            Definiert den Typ eines AM/PM-Strings in einer Zeitangabe
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateTimeAmPmType.None">
            <summary>
            Keine AM/PM-Angabe
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateTimeAmPmType.Left">
            <summary>
            AM/PM-Angabe links von der Zeitangabe
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.DateTimeAmPmType.Right">
            <summary>
            AM/PM-Angabe rechts von der Zeitangabe
            </summary>
        </member>
        <member name="T:InMemoryLoaderBase.HelperEnum.FileCompareMethod">
            <summary>
            Aufzählung für die möglichen Vergleichstypen
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.FileCompareMethod.Date">
            <summary>
            The date.
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.FileCompareMethod.Content">
            <summary>
            The content.
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.FileCompareMethod.DateAndContent">
            <summary>
            The content of the date and.
            </summary>
        </member>
        <member name="T:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind">
            <summary>
            Aufzählung für die unterstützten Hashing-Algorithmen
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Md5">
            <summary>
            MD5-Verfahren, das einen Hash mit einer Länge von 128 Bit erzeugt
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Md5Cng">
            <summary>
            CNG-(Cryptography Next Generation)Implementierung des MD5-Verfahrens
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.RipeMd160">
            <summary>
            RIPEMD-Verfahren, das einen Hash mit einer Länge von 160 Bit erzeugt
            </summary>
            <remarks>
            Entwickelt als Ersatz für MD4 und MD5
            </remarks>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Sha1">
            <summary>
            SHA-Verfahren, das einen Hash mit einer Länge von 160 Bit erzeugt
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Sha1Cng">
            <summary>
            CNG (Cryptography Next Generation)-Implementierung des SHA-Verfahrens
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Sha256">
            <summary>
            SHA-Verfahren, das einen Hash mit einer Länge von 256 Bit erzeugt
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Sha256Cng">
            <summary>
            CNG (Cryptography Next Generation)-Implementierung des SHA256-Verfahrens
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Sha384">
            <summary>
            SHA-Verfahren, das einen Hash mit einer Länge von 384 Bit erzeugt
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Sha384Cng">
            <summary>
            CNG (Cryptography Next Generation)-Implementierung des SHA384-Verfahrens
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Sha512">
            <summary>
            SHA-Verfahren, das einen Hash mit einer Länge von 512 Bit erzeugt
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.Sha512Cng">
            <summary>
            CNG (Cryptography Next Generation)-Implementierung des SHA512-Verfahrens
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.HmacMd5">
            <summary>
            Hash-based Message Authentication Code (HMAC) über das RIPEMD160-Verfahren
            </summary>
            <remarks>
            HMAC verwendet einen privaten Schlüssel, der mit den Daten vermischt wird.
            Das Ergebnis wird über das Hashing-Verfahren in einem Hash umgewandelt,
            der Hashcode wird wieder mit dem privaten Schlüssel vermengt und die
            Hashfunktion wird ein zweites Mal auf diese Datenmenge angewendet.
            HMACMD5 verwendet das MD5-Verfahren, das einen Hash der Länge 128 Bit erzeugt.
            </remarks>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.HmacRipemd160">
            <summary>
            Hash-based Message Authentication Code (HMAC) über das RIPEMD160-Verfahren
            </summary>
            <remarks>
            HMAC verwendet einen privaten Schlüssel, der mit den Daten vermischt wird.
            Das Ergebnis wird über das Hashing-Verfahren in einem Hash umgewandelt,
            der Hashcode wird wieder mit dem privaten Schlüssel vermengt und die
            Hashfunktion wird ein zweites Mal auf diese Datenmenge angewendet.
            HMACRIPEMD160 verwendet das RIPEMD160-Verfahren, das einen Hash der Länge 160 Bit erzeugt.
            </remarks>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.HmacSha1">
            <summary>
            Hash-based Message Authentication Code (HMAC) über das SHA1-Verfahren
            </summary>
            <remarks>
            HMAC verwendet einen privaten Schlüssel, der mit den Daten vermischt wird.
            Das Ergebnis wird über das Hashing-Verfahren in einem Hash umgewandelt,
            der Hashcode wird wieder mit dem privaten Schlüssel vermengt und die
            Hashfunktion wird ein zweites Mal auf diese Datenmenge angewendet.
            HMACSHA1 verwendet das SHA1-Verfahren, das einen Hash der Länge 160 Bit erzeugt.
            </remarks>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.HmacSha256">
            <summary>
            Hash-based Message Authentication Code (HMAC) über das SHA256-Verfahren
            </summary>
            <remarks>
            HMAC verwendet einen privaten Schlüssel, der mit den Daten vermischt wird.
            Das Ergebnis wird über das Hashing-Verfahren in einem Hash umgewandelt,
            der Hashcode wird wieder mit dem privaten Schlüssel vermengt und die
            Hashfunktion wird ein zweites Mal auf diese Datenmenge angewendet.
            HMACSHA256 verwendet das SHA1-Verfahren, das einen Hash der Länge 256 Bit erzeugt.
            </remarks>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.HmacSha384">
            <summary>
            Hash-based Message Authentication Code (HMAC) über das SHA384-Verfahren
            </summary>
            <remarks>
            HMAC verwendet einen privaten Schlüssel, der mit den Daten vermischt wird.
            Das Ergebnis wird über das Hashing-Verfahren in einem Hash umgewandelt,
            der Hashcode wird wieder mit dem privaten Schlüssel vermengt und die
            Hashfunktion wird ein zweites Mal auf diese Datenmenge angewendet.
            HMACSHA384 verwendet das SHA1-Verfahren, das einen Hash der Länge 384 Bit erzeugt.
            </remarks>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.HmacSha512">
            <summary>
            Hash-based Message Authentication Code (HMAC) über das SHA512-Verfahren
            </summary>
            <remarks>
            HMAC verwendet einen privaten Schlüssel, der mit den Daten vermischt wird.
            Das Ergebnis wird über das Hashing-Verfahren in einem Hash umgewandelt,
            der Hashcode wird wieder mit dem privaten Schlüssel vermengt und die
            Hashfunktion wird ein zweites Mal auf diese Datenmenge angewendet.
            HMACSHA512 verwendet das SHA1-Verfahren, das einen Hash der Länge 512 Bit erzeugt.
            </remarks>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.HashAlgorithmKind.MacTripleDes">
            <summary>
            Message Authentication Code (MAC) über das TripleDES-Verfahren
            </summary>
            <remarks>
            MACTripleDES setzt das TripleDES-Verfahren ein und erzeugt eunen Hash von 
            64 Bit Länge
            </remarks>
        </member>
        <member name="T:InMemoryLoaderBase.HelperEnum.StringDirection">
            <summary>
            String direction.
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.StringDirection.Right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.HelperEnum.StringDirection.Left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="T:InMemoryLoaderBase.AbstractPowerUpComponent">
            <summary>
            Wird zwingend benötigt um die Komponente korrekt registrieren zu können.
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.AbstractPowerUpComponent.Key">
            <summary>
            Fancy key to check in Init()
            </summary>
        </member>
        <member name="M:InMemoryLoaderBase.AbstractPowerUpComponent.Init(System.String)">
            <summary>
            Init-Methode die zur Initialisierung benötigt wird
            </summary>
            <param name="paramArgument">The Fancy key</param>
            <returns>True or false....</returns>
        </member>
        <member name="T:InMemoryLoaderBase.IDynamicClassInfo">
            <summary>
            I dynamic class info.
            </summary>
        </member>
        <member name="P:InMemoryLoaderBase.IDynamicClassInfo.ClassType">
            <summary>
            Gets or sets the type of the class.
            </summary>
            <value>The type of the class.</value>
        </member>
        <member name="P:InMemoryLoaderBase.IDynamicClassInfo.ClassObject">
            <summary>
            Gets or sets the class object.
            </summary>
            <value>The class object.</value>
        </member>
        <member name="P:InMemoryLoaderBase.IDynamicClassInfo.Methods">
            <summary>
            Gets the methods.
            </summary>
            <value>The methods.</value>
        </member>
        <member name="T:InMemoryLoaderBase.IDynamicClassSetup">
            <summary>
            I dynamic class setup.
            </summary>
        </member>
        <member name="P:InMemoryLoaderBase.IDynamicClassSetup.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:InMemoryLoaderBase.IDynamicClassSetup.Class">
            <summary>
            Gets or sets the class.
            </summary>
            <value>The class.</value>
        </member>
        <member name="P:InMemoryLoaderBase.IDynamicClassSetup.InitMethod">
            <summary>
            Gets the init method.
            </summary>
            <value>The init method.</value>
        </member>
        <member name="T:InMemoryLoaderBase.DynamicClassInfo">
            <summary>
            Dynamic class info object
            </summary>
        </member>
        <member name="P:InMemoryLoaderBase.DynamicClassInfo.ClassType">
            <summary>
            Gets or sets the type of the class.
            </summary>
            <value>The type of the class.</value>
        </member>
        <member name="P:InMemoryLoaderBase.DynamicClassInfo.ClassObject">
            <summary>
            Gets or sets the class object.
            </summary>
            <value>The class object.</value>
        </member>
        <member name="M:InMemoryLoaderBase.DynamicClassInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InMemoryLoaderBase.DynamicClassInfo"/> class.
            </summary>
        </member>
        <member name="M:InMemoryLoaderBase.DynamicClassInfo.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:InMemoryLoaderBase.DynamicClassInfo"/> class.
            </summary>
            <param name="paramType">Parameter type.</param>
            <param name="paramObject">Parameter object.</param>
        </member>
        <member name="F:InMemoryLoaderBase.DynamicClassInfo.methods">
            <summary>
            The methods.
            </summary>
        </member>
        <member name="P:InMemoryLoaderBase.DynamicClassInfo.Methods">
            <summary>
            Gets the methods.
            </summary>
            <value>The methods.</value>
        </member>
        <member name="T:InMemoryLoaderBase.DynamicClassSetup">
            <summary>
            Dynamic class setup.
            </summary>
        </member>
        <member name="F:InMemoryLoaderBase.DynamicClassSetup.initMethod">
            <summary>
            The init method.
            </summary>
        </member>
        <member name="P:InMemoryLoaderBase.DynamicClassSetup.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:InMemoryLoaderBase.DynamicClassSetup.Class">
            <summary>
            Gets or sets the class.
            </summary>
            <value>The class.</value>
        </member>
        <member name="P:InMemoryLoaderBase.DynamicClassSetup.InitMethod">
            <summary>
            Gets the init method.
            </summary>
            <value>The init method.</value>
        </member>
    </members>
</doc>
